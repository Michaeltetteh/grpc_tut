# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from django_grpc import main_pb2 as django__grpc_dot_main__pb2


class MainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/django_grpc.Main/ping',
                request_serializer=django__grpc_dot_main__pb2.Ping.SerializeToString,
                response_deserializer=django__grpc_dot_main__pb2.Pong.FromString,
                )
        self.new_system_run = channel.unary_unary(
                '/django_grpc.Main/new_system_run',
                request_serializer=django__grpc_dot_main__pb2.SystemRun.SerializeToString,
                response_deserializer=django__grpc_dot_main__pb2.SystemRunResponse.FromString,
                )
        self.new_activation = channel.unary_unary(
                '/django_grpc.Main/new_activation',
                request_serializer=django__grpc_dot_main__pb2.Activation.SerializeToString,
                response_deserializer=django__grpc_dot_main__pb2.ActivationResponse.FromString,
                )


class MainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def new_system_run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def new_activation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=django__grpc_dot_main__pb2.Ping.FromString,
                    response_serializer=django__grpc_dot_main__pb2.Pong.SerializeToString,
            ),
            'new_system_run': grpc.unary_unary_rpc_method_handler(
                    servicer.new_system_run,
                    request_deserializer=django__grpc_dot_main__pb2.SystemRun.FromString,
                    response_serializer=django__grpc_dot_main__pb2.SystemRunResponse.SerializeToString,
            ),
            'new_activation': grpc.unary_unary_rpc_method_handler(
                    servicer.new_activation,
                    request_deserializer=django__grpc_dot_main__pb2.Activation.FromString,
                    response_serializer=django__grpc_dot_main__pb2.ActivationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'django_grpc.Main', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Main(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/django_grpc.Main/ping',
            django__grpc_dot_main__pb2.Ping.SerializeToString,
            django__grpc_dot_main__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def new_system_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/django_grpc.Main/new_system_run',
            django__grpc_dot_main__pb2.SystemRun.SerializeToString,
            django__grpc_dot_main__pb2.SystemRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def new_activation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/django_grpc.Main/new_activation',
            django__grpc_dot_main__pb2.Activation.SerializeToString,
            django__grpc_dot_main__pb2.ActivationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
